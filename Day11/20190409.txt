20190409
今日bug：
	(1)X中的X无法覆盖X中的X，正在尝试分配更低的访问权限——子类方法覆盖父类方法，必须要保证权限大于等于父类权限
1.成员函数的特点
	子父类中方法的特点
	特殊情况：子父类中出现一模一样的方法时，子类对象中运行的是子类的方法（称之为覆盖/复写/重写（override））————因为先去子类的方法里找，子类的方法里面没有再去父类的方法里找
    重载：本类里
	覆盖：子类里，返回值类型，函数名，参数列表均一致,保留父类功能的声明，建立子类功能特有的内容
	覆盖运用：父类的同名方法功能太少了
	覆盖的注意事项：(1)无法覆盖，正在尝试分配更低的访问权限，以前为public——子类方法覆盖父类方法，必须要保证权限大于等于父类权限；
					(2)父类的方法为private时无法覆盖，因为此时父类中的方法无法访问；
					(3)无法覆盖，被覆盖的方法为static/覆盖方法为静态——覆盖被覆盖的都应为同一类型；
					(4)返回类型X与X不兼容——返回值类型不同不是覆盖，会发生编译错误，成员变量不可能存在覆盖；
	子类的实例化过程
		创建子类对象时，Fu中的空参数构造函数也运行了，因为子类中所有的构造函数的第一行默认都有一个隐式super()语句，调用本类中的构造函数用this（实参列表）语句，调用父类中的构造函数用Super（实参列表）；
	    为什么子类对象初始化都要访问父类中的构造函数呢？因为子类继承了父类中的内容，所以创建对象时必须要先看父类是如何对内容进行初始化的；
		注意：当父类中没有空参数构造函数时，子类需要通过显示定义super语句指定要访问的父类中的构造函数；
		注意：用来调用父类构造函数的super语句在子类构造函数中必须定义在第一行，因为父类初始化必须先完成；
		注意：有this()就无super(),此时可以通过本类其他的super()来初始化，如果整个子类都没有super()则程序出错；
	this 和super都要定义在第一行，因为初始化要先执行；