20190415
bugs:
	I.微报告的异常错误Exception:必须对其进行捕获或声明以便抛出	
1.异常：(1)发生在运行时期（编译——语法错误）
		   Java程序在运行时期发生的不正常情况（问题），按照面向对象的思想对不正常情况进行描述和对象封装；
		(2)分为：throwable:定义了对于问题的共性的功能
			I.error：一般不处理（严重），由系统底层发生后传给jvm，基本上发生就必须修改代码，不做针对性处理；
			II.exception（父类，其下有多个子类）：可处理，jvm发生，虚拟机运行时发生的问题，可以进行针对性处理；
					第一类：编译时会被检测的异常（语法+基本安全问题）；
					第二类：运行时异常（编译时不检测）RuntimeException及其子类；
		(3)异常处理过程：
			当发生问题时，jvm将已知的问题封装成对象（以后遇到时去API找问题及解决办法）；
			new 错误()将问题抛给调用者main函数；
			main()无针对性处理方式，main继续向外抛给调用者jvm，jvm使用默认处理方式，将问题的名称+信息+位置在控制台显示出来，让调用者看到并结束程序；
		(4)异常的处理方式
			I.遇到问题不进行具体的处理，而是继续抛给调用者；
				在编写功能时，编写者知道该功能有可能发生问题，而这个问题有可能来自于调用者传递的参数而导致功能无法运行，此时发生的问题应让调用者知道并最好让调用者有预先的处理方式；
				所以在定义功能时，需要在功能上对有可能发生的问题进行声明。
				声明关键字:throws 异常类(Exception)
				目的：让调用者知道以进行处理
			  主函数在使用已经声明过的功能时可以继续抛异常
			II.针对性的处理方式：捕获（有catch才是真正的异常处理）
				try{
					//有可能发生异常的代码；
				}
				catch(异常类 变量){
					//捕获处理异常的代码；
				}
				finally{
					//一定会被执行的代码
				}
		(5)异常的常见方法
			System.out.println("异常");
			System.out.println(e.getMessage());//异常信息
			System.out.println(e.toString());//异常名称+异常位置
			e.printStackTrace();//名字+信息+位置，jvm默认处理收到异常就是调用此方法
			自定义异常信息
				在可能出现异常的位置throw new ArithmeticException("你想的描述");
		(6)throw(抛出异常对象)与throws(声明异常)区别
			I.位置不同
				throws：函数上，后面跟的是异常类，可以跟多个；
				throw：函数内，后面跟的是异常对象；
			II.功能不同
				throws：用来声明异常，让调用者只知道该功能有可能出现问题，并由调用者给出预先的处理方式；
				throw：抛出具体问题对象，执行到throw功能已经结束后面都执行不到（后面没必要定义其它语句），直接跳转到调用者（不用return），并将具体问题对象也抛给调用者；
			III.throws：多用于编译时检查语法错误；
				throw：多用于运行检查异常；
		(7)异常体系最大特点是体系中的类及类产生的对象都具备可抛性，可以被throw/throws操作（只可操作异常体系！）；
		(8)异常原则：
				I.功能内部有异常throw抛出，功能上一定要throws声明！！！（有throw必有throws）;
				  内部抛什么功能上就声明什么，声明的目的就是让调用者处理（两种处理方式：继续抛出/捕获），如调用者不处理则编译失败；
				II.特殊情况
				   当函数内通过throw抛出了RuntimeException及其子类异常对象时（即异常已经导致程序失败），函数上可以不用throws声明；
				   不声明的目的就是不让调用者处理，让调用者的程序停止，要对代码进行修改（类似error）；
		(9)自定义异常：自定义程序中的问题可以像java中的异常一样对问题进行描述
			throw new 自定义异常类名(传入参数)；
			class 自定义异常类名 extends Exception（需要声明）/RuntimeException（此时不虚声明直接抛出）{}
			
				   
				  
			
			