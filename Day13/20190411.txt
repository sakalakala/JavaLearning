20190411
1.多态中对成员的调用
	(1)成员变量 当子父类出现同名成员变量，继承后调用时哪怕成员变量同名，X.NUM调用的是X里的NUM（只看调用该成员变量的引用所属的类中的成员变量）；
				Fu f=new Zi();//子类向上转型（化妆为）父类
				及无论编译或者运行都看等号左边！！！
	(2)成员函数 出现一模一样的函数时，多态调用编译时看的是引用变量所属的类中 的方法，运行时看的是对象所属的类中的方法；
				编译（写程序时）看左边，运行看右边；
	(3)静态函数 静态方法和对象没关系，之所属一个类；
				出现一模一样函数时，多态调用编译和运行是看引用变量所属的类中的方法；简单来说编译运行看左边；
2.Object概述：JAVA中最顶层对象，所有类的父类，定义了所有对象都具备的功能
	JAVA LANG---JAVA语言包  SRC----源
	Object()
	registerNatives()本地注册，一上来就注册
	关键字native---本地方法（无方法体）
	只要写了一个类，里面哪怕什么方法都没写，只要它继承与Object它就自带一些方法；
	里面的常用方法(使用时因为既要保留父类的功能声明，又要定义子类功能的特有内容，所以多使用覆盖)：
		equals(Object obj)--bool    判断对象是否相同（当前对象与另一个对象比较）
		toString	建立特有的字符串表现形式，只要覆盖toString()
3.内部类(InnerClassDemo)：将类定义到另一个类的内部
	A类要直接访问B类中 的成员是可以将A类定义到B类中，作为B类的内部类存在；
	访问规则：内部类可以直接访问外部类中的成员；
			  外部类想要访问内部类，只能创建内部类的对象来访问；
			  编译后出现A$B（A内的B）
	(1)非静态内部类（稍后）
		非静态非私有内部类
			//如果内部类权限是非私有的，就可以在外部其他程序中被访问到，可以通过创建外部类对象完成；
			  创建的是内部类对象
			  Outer.Inner in=new Outer().new Inner();
			  in.show();
	(2)静态内部类
		静态非私有内部类
			//静态内部类相当于外部类
				访问非静态成员
					Outer.Inner in=new Outer.Inner();
					in.show();
				访问静态成员
					Outer.Inner.show();
	注意：非静态内部类不可以定义静态方法！！！！
		  在非静态内部类里只可以定义常量值，而不能定义其他静态成员！！！
	(3)细节：
			I.内外部类变量同名：内部类名.this.变量名
							   外部类名.this.变量名
			    为什么内部类可以直接访问外部类成员，因为内部类持有外部类引用，外部类名.this
			II.将内部类定义到了局部位置上
				内部类不能访问局部变量（因为生命周期不一样），只能访问被final修饰的局部变量；
			III.匿名内部类：简化书写的内部类--------类比：匿名对象！！！
				前提：内部类需要继承或者实现外部的类或者接口
				格式：
				new 父类or接口名(){子类内容}
				本质：其实就是一个子类对象，内容稍微有点大
				使用：接口内方法数量不多（不超过2个）时可以使用，可用于局部简化书写
					  静态时只能调用静态
		对象后面加分号——创建对象
				加大括号——创建子类对象
			
			
		