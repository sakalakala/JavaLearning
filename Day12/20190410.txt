20190410
今日bugs：
	(1)方法声明无效，需要返回类型————如果构造函数出现，则有可能是函数名和类名不一致（是不是打错了）；
1.关键字final————最终类/方法/变量
	修饰的类不可以别继承；
	修饰的方法不可以被覆盖，但可以覆盖未被final修饰的方法；
	修饰的变量是一个常量，只能复制一次，使用数据不变时进行final化，此时数据多也被静态化；被final修饰的变量名称规范：所有字母都大写，由多个单词组成则用_进行分隔；
		注意：单例设计模式时懒汉式不可以加final，饿汉可以；
			  全局常量：public static final 
2.抽象类
	抽象事物：描述一个事物，却没有足够的信息；
	抽象关键字(abstract)；
	面对抽象事物，虽然不具体但是可以简单化，不用面对具体的事物；
	特点：
		(1)抽象方法一定定义在抽象类中，都需要用abstract来修饰；
		(2)抽象类不能实例化，不能用new关键字来创建对象；
		(3)只有子类覆盖了所有的抽象方法之后，子类具体化，子类就可以创建对象；
	    (4)抽象类也是不断地向上抽取而来的，抽取了方法的声明而不确定具体的方法内容；由不同的子类来完成具体的方法内容；
	注意：
		(1)抽象类中有构造函数，抽象类的构造函数虽然不能给抽象类对象实例化，因为抽象类不能创建对象，但是抽象类有子类，它的构造函数可以子类的对象实例化；
			抽象类和一般类的异同点：
				相同：都是用来描述事物，都可以进行属性和行为的描述；
				不同：抽象类描述事物的信息不具体，一般类描述事物的信息具体；
					  抽象类中可以定义抽象方法，一般类不行；
					  抽象类不可以实例化，一般类可以；
		(2)抽象类一定是个父类，因为它必须依赖子类覆盖抽象方法才能实例化方法；
		(3)抽象类中可以不定义抽象方法，仅仅是让该类不能创建对象；
		(4)关键字abstract什么关键字不能共存？———提示：非法的修饰符组合；
			final(一定要有子类;
			private(无法覆盖)；
			static(可直接调用方法);
3.接口：抽象类中所有方法都是抽象是，可以把抽象类用另一种形式来表示。
		先把子类的方法定义出来，子类照着方法去实现；
	(1)关键字interface
		重点：无方法主体！！！！！
	(2)接口中的成员和class定义不同之处：I.全局常量 II.抽象方法；且都有固定修饰符,共性：成员都用public修饰(public static可以省略);
	(3)特点：I.不可以实例化；
			 II.需要覆盖了接口中所有抽象方法的子类才可以实例化，否则该子类还是一个抽象类；
			 III.接口是用来被实现的(类与接口之间的关系是实现关系)；
			 IV.优点：JAVA不直接支持多继承（方法主体内容不同容易产生调用不确定性），而是通过接口解决问题；而接口由于没有直接定义方法，将多继承改为多实现，这样子可以重复覆盖方法而不会产生调用的不确定性；
			 V.一个类继承另一个类时还可以实现多个接口,避免单继承的局限性，继承时获取体系的基本功能，拓展功能时可以通过接口实现；
		注意：类与类：单继承关系；is a 
		      类与接口：实现关系；like a 
			  接口与接口：多继承关系，此时实例化需要将多个接口的方法均覆盖；
	(4)没有抽象方法的抽象类：只需要使用接口中的部分方法时，使用没有抽象方法的抽象类（空实现）；
	(5)思想：对外提供的都叫接口，权限均为public，一方使用接口，一方实现接口；
		I.拓展功能；
		II.暴露出来的规则；
		III.接口的出现降低了耦合性（解耦）；
	(6)抽象类与接口的区别：类用于描述事物的共性基本功能，接口用于定义的都是事物的额外功能；
		I.类与类是继承关系；
		  类与接口是实现关系；
		II.抽象类中可以定义抽象和非抽象方法，子类可以直接使用，或者覆盖使用；
		   接口中定义的都是抽象方法，必须实现才能用；
4.多态：多种形态（？）
			函数多态性：重载
			对象多态性：父类/接口的引用指向了子类的对象,所有的子类对象都可以接收；
						但在多态调用时不能使用子类的特有方法；
		(1)使用前提：I.必须有关系才可以使用（继承/实现）；
				     II.通常有覆盖；
		(2)向上向下转型
			I.向上转型；优点：隐藏了子类型，提高了代码的扩展性；
						缺点：只能使用父类中的功能，不能使用子类特有的功能；
						使用：不需要面对子类型，又要提高扩展性，或者父类功能就够用了；
			II.向下转型（强制类型转换）：优点：如果想要使用子类特有功能；
										 缺点：面对具体的子类型，向下转型有风险，有可能转型成其他的子类(ClassCastException,A cannot be cast to B),安全需要进行判断；
											   要加判断！！！！！判断关键字(对象 instanceof 类型)：判断一个对象是否匹配一个类型；
			注意！！！：转型过程中自始至终只有子类对象在坐着类型的变化 
										 
				  
		
